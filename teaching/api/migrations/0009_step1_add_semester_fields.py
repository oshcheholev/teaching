# Generated by Django 5.2.5 on 2025-08-17 08:31

from django.db import migrations, models
import re


def populate_semester_fields(apps, schema_editor):
    """Populate year and season fields from existing name field"""
    Semester = apps.get_model('api', 'Semester')
    
    for semester in Semester.objects.all():
        # Parse semester name like "2025W" or "Winter 2025"
        name = semester.name.strip()
        
        # Try to extract year and season from name
        year_match = re.search(r'20\d{2}', name)
        season_match = re.search(r'[WS]', name)
        
        if year_match:
            semester.year = int(year_match.group())
        else:
            semester.year = 2025  # Default year
            
        if season_match:
            semester.season = season_match.group()
        else:
            # Try to determine from keywords
            if 'winter' in name.lower() or 'w' in name.lower():
                semester.season = 'W'
            else:
                semester.season = 'S'
        
        # Update the name to standard format
        semester.name = f"{semester.year}{semester.season}"
        semester.save()


def remove_duplicate_semesters(apps, schema_editor):
    """Remove duplicate semesters before adding unique constraint"""
    Semester = apps.get_model('api', 'Semester')
    
    # Group by year and season, keep only the first one
    seen = set()
    duplicates = []
    
    for semester in Semester.objects.all().order_by('id'):
        key = (semester.year, semester.season)
        if key in seen:
            duplicates.append(semester.id)
        else:
            seen.add(key)
    
    # Delete duplicates
    if duplicates:
        Semester.objects.filter(id__in=duplicates).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0008_course_curriculum_subject_course_study_subject'),
    ]

    operations = [
        # Step 1: Add new fields to Semester
        migrations.AddField(
            model_name='semester',
            name='year',
            field=models.IntegerField(help_text='Academic year', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='semester',
            name='season',
            field=models.CharField(
                max_length=1, 
                choices=[('W', 'Winter'), ('S', 'Summer')],
                help_text='W for Winter, S for Summer',
                null=True, 
                blank=True
            ),
        ),
        migrations.AddField(
            model_name='semester',
            name='start_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='semester',
            name='end_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='semester',
            name='is_active',
            field=models.BooleanField(
                default=True, 
                help_text='Is this semester currently active for enrollment'
            ),
        ),
        
        # Step 2: Populate the new fields
        migrations.RunPython(populate_semester_fields, migrations.RunPython.noop),
        
        # Step 3: Remove duplicates
        migrations.RunPython(remove_duplicate_semesters, migrations.RunPython.noop),
        
        # Step 4: Make fields non-nullable
        migrations.AlterField(
            model_name='semester',
            name='year',
            field=models.IntegerField(help_text='Academic year'),
        ),
        migrations.AlterField(
            model_name='semester',
            name='season',
            field=models.CharField(
                max_length=1, 
                choices=[('W', 'Winter'), ('S', 'Summer')],
                help_text='W for Winter, S for Summer'
            ),
        ),
    ]
